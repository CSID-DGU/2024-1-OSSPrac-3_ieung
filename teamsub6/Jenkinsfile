// Jenkins Pipeline을 정의하는 파일입니다.
pipeline {
    // 에이전트 설정 - Jenkins는 모든 노드에서 파이프라인을 실행할 수 있습니다.
    agent any
    
    // 환경 변수 설정 - Docker Hub 자격 증명 및 Docker Hub 네임스페이스를 설정합니다.
    environment {
        DOCKER_CREDENTIALS_ID = 'docker-hub-credentials'
        DOCKERHUB_NAMESPACE = 'leeboseong'
        IMAGE_NAME = 'frontapp'
    }
    
    // 파이프라인의 각 단계를 정의합니다.
    stages {
        // 첫 번째 단계 - Git 저장소에서 코드를 체크아웃합니다.
        stage('Checkout') {
            steps {
                // SCM으로부터 소스를 체크아웃합니다.
                checkout scm
            }
        }
        
        // 두 번째 단계 - Docker 이미지를 빌드합니다.
        stage('Build Image') {
            steps {
                script {
                    // Docker 이미지를 빌드합니다.
                    // Dockerfile이 있는 디렉토리 경로를 지정합니다 (여기서는 "./FrontEnd").
                    dockerImage = docker.build("${DOCKERHUB_NAMESPACE}/${IMAGE_NAME}:${env.BUILD_ID}", "./FrontEnd")
                }
            }
        }
        
        // 세 번째 단계 - Docker 이미지를 태깅합니다.
        stage('Tag Image') {
            steps {
                script {
                    // 빌드된 Docker 이미지를 'latest' 태그로 태깅합니다.
                    dockerImage.tag("${DOCKERHUB_NAMESPACE}/${IMAGE_NAME}:latest")
                }
            }
        }
        
        // 네 번째 단계 - Docker 이미지를 Docker Hub에 푸시합니다.
        stage('Push Image') {
            steps {
                script {
                    // Docker Hub에 로그인하고 이미지를 푸시합니다.
                    docker.withRegistry('https://registry.hub.docker.com', "${DOCKER_CREDENTIALS_ID}") {
                        // 특정 빌드 ID와 'latest' 태그로 이미지를 푸시합니다.
                        dockerImage.push("${env.BUILD_ID}")
                        dockerImage.push('latest')
                    }
                }
            }
        }
    }
    
    // 파이프라인이 끝난 후 항상 실행되는 단계
    post {
        always {
            // 작업 디렉토리를 정리합니다.
            cleanWs()
        }
    }
}